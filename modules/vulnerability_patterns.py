# Define vulnerability patterns for PHP code
VULNERABILITY_PATTERNS = {
    "SQL Injection": {
        "pattern": r"(?:mysql_query|mysqli_query|pg_query)\s*\(\s*(?!.*\bprepare\b).*\$(?!_POST\[['\"]\w+['\"](?:\]|->))",
        "severity": "High",
        "remediation": "Use prepared statements with parameter binding (PDO or mysqli_prepare) instead of direct variable insertion."
    },
    "Cross-Site Scripting (XSS)": {
        "pattern": r"(echo|print|<?=)\s*\$_(?:GET|POST|REQUEST|COOKIE)\[.*?\]",
        "severity": "High",
        "remediation": "Sanitize output using htmlspecialchars() or a secure template engine."
    },
    "File Inclusion": {
        # ✅ Updated to detect direct AND indirect includes from user input
        "pattern": r"(?:include|require|include_once|require_once)\s*\(\s*(?:\$_(?:GET|POST|REQUEST|COOKIE)\[.+?\]|\$[A-Za-z_\x80-\xff][A-Za-z0-9_\x80-\xff]*)",
        "severity": "High",
        "remediation": "Validate and sanitize file paths, use whitelisting, and never allow user input to directly or indirectly specify file paths."
    },
    "Command Injection": {
        "pattern": r"(?:system|exec|shell_exec|passthru|eval|popen|proc_open)\s*\(\s*\$(?:_GET|_POST|_REQUEST|_COOKIE)",
        "severity": "High",
        "remediation": "Avoid using shell commands in PHP. If necessary, validate input and use escapeshellarg() or escapeshellcmd()."
    },
    "Insecure File Upload": {
        "pattern": r"move_uploaded_file\s*\(\s*\$_FILES\[.+?\]\[.+?\]",
        "severity": "Medium",
        "remediation": "Validate file types, scan for malicious content, and store uploads outside the web root."
    },
    "Hardcoded Credentials": {
        "pattern": r"""(?i)(password|passwd|pwd|secret|credential[s]?)\s*["']?\s*[:=]\s*["']([^"']{4,})["']""",
        "severity": "Medium",
        "remediation": "Store sensitive credentials in environment variables or secure configuration, not directly in the code."
    },
    "Session Fixation": {
        "pattern": r"session_id\s*\(\s*\$_(?:GET|POST|REQUEST|COOKIE)",
        "severity": "Medium",
        "remediation": "Regenerate session IDs after authentication and never accept them from user input."
    },
    "Insecure Cryptographic Storage": {
        "pattern": r"(?:md5|sha1)\s*\(\s*\$(?:password|passwd|pwd)",
        "severity": "Medium",
        "remediation": "Use password_hash() instead of MD5, SHA1, or other insecure hash functions."
    },
    "Insecure Cookie Configuration": {
        "pattern": r"setcookie\s*\([^,]+(,\s*[^,]+){2,5}\s*\)",
        "severity": "Low",
        "remediation": "Set secure, httpOnly, and samesite attributes when creating cookies."
    },
    "Information Disclosure": {
        "pattern": r"(?:phpinfo|var_dump|print_r|debug)\s*\(",
        "severity": "Low",
        "remediation": "Remove debug and information disclosure functions from production code."
    }
}

# ✅ List of safe functions that sanitize or secure variables
SAFE_FUNCTIONS = [
    "htmlspecialchars",
    "filter_input",
    "password_hash",
    "mysqli_real_escape_string",
    "filter_var",
    "intval",
    "floatval"
]
